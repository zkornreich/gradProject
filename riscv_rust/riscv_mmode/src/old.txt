#![no_std]
#![no_main]

use core::panic::PanicInfo;
use riscv::register::{pmpcfg0, pmpaddr0, mcause, mepc, mtval};
use riscv_rt::entry;

#[entry]
fn main() -> ! {
    unsafe {
        // Define a NAPOT region at 0x8000_1000, covering 4 KiB
        let pmpaddr_val = (0x8000_1000 >> 2) | 0b11; // NAPOT encoding

        pmpaddr0::write(pmpaddr_val);

        // R=0, W=0, X=0, A=NAPOT, L=0 => 0b00001001 = 0x09
        pmpcfg0::write(0x09);
    }

    // Try to read from the now-protected region
    unsafe {
        let ptr = 0x8000_1000 as *const u64;
        let _val = core::ptr::read_volatile(ptr);
    }

    loop {}
}

// Trap handler (exported to riscv-rt)
#[export_name = "ExceptionHandler"]
fn trap_handler(_frame: &riscv_rt::TrapFrame) {
    let _cause = mcause::read();
    let _trap_addr = mtval::read();
    let _pc = mepc::read();

    // This is where you'd log or blink an LED, etc.
    // In QEMU, you could log to UART with a UART driver (see below)

    loop {} // Hang after trap
}

#[panic_handler]
fn panic(_info: &PanicInfo) -> ! {
    loop {}
}

